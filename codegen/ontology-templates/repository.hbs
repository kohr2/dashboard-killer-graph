/**
 * I{{toValidIdentifier entityName}}Repository - generated from ontology.json
 * DO NOT EDIT MANUALLY. Changes will be overwritten.
 */

import { {{toValidIdentifier entityName}} } from './{{toValidIdentifier entityName}}.entity';

export interface I{{toValidIdentifier entityName}}Repository {
  findById(id: string): Promise<{{toValidIdentifier entityName}} | null>;
  findAll(): Promise<{{toValidIdentifier entityName}}[]>;
  create(entity: {{toValidIdentifier entityName}}): Promise<{{toValidIdentifier entityName}}>;
  update(id: string, entity: Partial<{{toValidIdentifier entityName}}>): Promise<{{toValidIdentifier entityName}}>;
  delete(id: string): Promise<void>;
  {{#if keyProperties.length}}
  findBy{{#each keyProperties}}{{#if @first}}{{this}}{{else}}And{{this}}{{/if}}{{/each}}({{#each keyProperties}}{{this}}: string{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{toValidIdentifier entityName}} | null>;
  {{/if}}
  {{#if vectorIndex}}
  findSimilar(entity: {{toValidIdentifier entityName}}, limit?: number): Promise<{{toValidIdentifier entityName}}[]>;
  {{/if}}
}

export abstract class Base{{toValidIdentifier entityName}}Repository implements I{{toValidIdentifier entityName}}Repository {
  abstract findById(id: string): Promise<{{toValidIdentifier entityName}} | null>;
  abstract findAll(): Promise<{{toValidIdentifier entityName}}[]>;
  abstract create(entity: {{toValidIdentifier entityName}}): Promise<{{toValidIdentifier entityName}}>;
  abstract update(id: string, entity: Partial<{{toValidIdentifier entityName}}>): Promise<{{toValidIdentifier entityName}}>;
  abstract delete(id: string): Promise<void>;
  
  {{#if keyProperties.length}}
  async findBy{{#each keyProperties}}{{#if @first}}{{this}}{{else}}And{{this}}{{/if}}{{/each}}({{#each keyProperties}}{{this}}: string{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{toValidIdentifier entityName}} | null> {
    const all = await this.findAll();
    return all.find(entity => {{#each keyProperties}}entity.{{this}} === {{this}}{{#unless @last}} && {{/unless}}{{/each}}) || null;
  }
  {{/if}}

  {{#if vectorIndex}}
  async findSimilar(entity: {{toValidIdentifier entityName}}, limit: number = 10): Promise<{{toValidIdentifier entityName}}[]> {
    // Implementation would depend on vector similarity algorithm
    const all = await this.findAll();
    return all.filter(e => e.id !== entity.id).slice(0, limit);
  }
  {{/if}}
} 
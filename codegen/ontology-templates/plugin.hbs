import { OntologyPlugin } from '@platform/ontology/ontology.plugin';
import * as fs from 'fs';
import * as path from 'path';

// Load ontology data from JSON file
const ontologyPath = path.join(__dirname, 'ontology.json');
const ontologyData = JSON.parse(fs.readFileSync(ontologyPath, 'utf8'));

// Optional register function - only import if register.ts exists
let register{{pascalCase name}}: (() => void) | undefined;
try {
  const registerModule = require('./register');
  register{{pascalCase name}} = registerModule.register{{pascalCase name}};
} catch (error) {
  // Register file doesn't exist, which is fine for ontologies without DI registration
}

export const {{name}}Plugin: OntologyPlugin = {
  name: '{{name}}',
  entitySchemas: ontologyData.entities,
  relationshipSchemas: ontologyData.relationships,
  reasoning: ontologyData.reasoning,
  entityExtraction: ontologyData.entityExtraction,
  
  // Define path aliases for this plugin
  pathAliases: {
    '@{{name}}/*': '*',                    // @{{name}}/entities -> ontologies/{{name}}/entities
    '@{{name}}/entities': 'entities',      // @{{name}}/entities -> ontologies/{{name}}/entities
    '@{{name}}/services': 'services',      // @{{name}}/services -> ontologies/{{name}}/services
    '@{{name}}/types': 'types',            // @{{name}}/types -> ontologies/{{name}}/types
  },
  
  // Optional registration hook
  onRegister: () => {
    console.log('ðŸ”§ {{pascalCase name}} plugin registered with path aliases');
  },
  
  ...(register{{pascalCase name}} && {
    serviceProviders: {
      register: register{{pascalCase name}},
    },
  }),
}; 
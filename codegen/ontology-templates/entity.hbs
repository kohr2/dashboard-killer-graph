import { BaseEntity } from '@shared/types/base-entity';

export interface {{entityName}} extends BaseEntity {
  {{#each properties}}
  {{@key}}: {{{replaceType this}}};
  {{/each}}
}

export class {{entityName}}Entity implements {{entityName}} {
  {{#each properties}}
  {{@key}}!: {{{replaceType this}}};
  {{/each}}

  constructor(data: Partial<{{entityName}}>) {
    Object.assign(this, data);
  }

  {{#if keyProperties}}
  /**
   * Get key properties for this entity
   */
  getKeyProperties(): Record<string, any> {
    return {
      {{#each keyProperties}}
      {{this}}: this.{{this}},
      {{/each}}
    };
  }
  {{/if}}

  {{#if vectorIndex}}
  /**
   * Get vector representation for this entity
   */
  getVectorRepresentation(): string {
    return `${this.type}:${this.name}`;
  }
  {{/if}}

  {{#if enrichment}}
  /**
   * Get enrichment configuration for this entity
   */
  getEnrichmentConfig() {
    return {
      service: '{{enrichment.service}}',
      properties: [{{#each enrichment.properties}}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]
    };
  }
  {{/if}}
} 
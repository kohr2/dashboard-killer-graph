import { BaseEntity } from '@shared/types/base-entity';

export interface {{toValidIdentifier entityName}} extends BaseEntity {
  {{#each properties}}
  {{@key}}: {{{replaceType this}}};
  {{/each}}
}

export class {{toValidIdentifier entityName}}Entity implements {{toValidIdentifier entityName}} {
  id?: string;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  {{#each properties}}
  {{@key}}!: {{{replaceType this}}};
  {{/each}}

  constructor(data: Partial<{{toValidIdentifier entityName}}>) {
    Object.assign(this, data);
  }

  {{#if keyProperties}}
  {{#if (hasValidKeyProperties keyProperties properties)}}
  /**
   * Get key properties for this entity
   */
  getKeyProperties(): Record<string, any> {
    return {
      {{#each keyProperties}}
      {{#if (lookup ../properties this)}}
      {{this}}: this.{{this}},
      {{/if}}
      {{/each}}
    };
  }
  {{/if}}
  {{/if}}

  {{#if vectorIndex}}
  /**
   * Get vector representation for this entity
   */
  getVectorRepresentation(): string {
    {{#if (lookup properties "name")}}
      {{#if (lookup properties "type")}}
        return `${this.type}:${this.name}`;
      {{else}}
        return `{{toValidIdentifier entityName}}:${this.name}`;
      {{/if}}
    {{else}}
      {{#if (lookup properties "type")}}
        return `${this.type}:${this.id || 'unknown'}`;
      {{else}}
        return `{{toValidIdentifier entityName}}:${this.id || 'unknown'}`;
      {{/if}}
    {{/if}}
  }
  {{/if}}

  {{#if enrichment}}
  /**
   * Get enrichment configuration for this entity
   */
  getEnrichmentConfig() {
    return {
      service: '{{enrichment.service}}',
      properties: [{{#each enrichment.properties}}'{{this}}'{{#unless @last}}, {{/unless}}{{/each}}]
    };
  }
  {{/if}}
} 
# .cursorrules

# Instructions for Test-Driven Development (TDD)
# These rules guide the AI to follow a strict TDD approach.
test-driven-development:
  - rule: "For any new feature or modification, always start by writing a failing test (RED phase)."
  - rule: "When asked to create a new feature, first propose the test file (`*.test.ts`)."
  - rule: "After writing the test, generate the simplest possible production code to make the test pass (GREEN phase)."
  - rule: "Never write business logic in a source file without a corresponding test that covers it."
  - rule: "If I ask you to fix a bug, first ask me to write a test that reproduces the bug."

# Test Conventions
# How tests should be structured in this project.
testing-conventions:
  - rule: "Use Jest's `describe`, `it`, or `test` syntax."
  - rule: "Test files must be named `[file-name].test.ts`."
  - rule: "Place unit tests in `test/unit/`, respecting the `src/` directory structure."
  - rule: "Systematically mock external dependencies (like API calls with `axios` or database drivers) using `jest.fn()` or `jest.spyOn()`."
  - rule: "Each `describe` block should focus on a single method or component."
  - rule: "Each test (`it`) should verify a single behavior."

# Code Style and Quality
# Ensure that the generated code is consistent with the rest of the project.
code-style-typescript:
  - rule: "Format all generated TypeScript code using the project's Prettier configuration."
  - rule: "Adhere to the ESLint rules defined in the project. Do not introduce code that generates lint warnings."
  - rule: "Utilise les alias de tsconfig-paths pour les imports."

# Commit Messages
# Ensure that AI-generated commits are clear and standardized.
commit-messages:
  - rule: "Follow the 'Conventional Commits' convention. For example: `feat(auth): add password reset endpoint` or `fix(tests): repair user service tests`."
  - rule: "The body of the commit message should explain the 'why' of the change, not the 'how'." 


code-generation-rules:
  - rule: "Always search if generated code corresponding to the requested feature is already present in the project."
  - rule: "If generated code corresponding to the requested feature is already present in the project, do not generate code."
  - rule: "Do not generate code that is not tested."
  - rule: "Do not generate code that does not comply with the project's code conventions."
  - rule: "Do not generate code that does not comply with the project's code quality rules."
  - rule: "Do not generate code that does not comply with the project's security rules."
  - rule: "Do not generate code that does not comply with the project's performance rules."
  - rule: "Do not generate code that does not comply with the project's maintenance rules."
  - rule: "Do not generate code that does not comply with the project's documentation rules."
  - rule: "Do not generate code that does not comply with the project's testing rules."
  - rule: "Do not generate code that does not comply with the project's development rules."
  - rule: "Do not generate code that does not comply with the project's test-driven development (TDD) rules."
 
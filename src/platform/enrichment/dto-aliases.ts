/**
 * DTO Aliases - Auto-generated bridge between legacy entities and generated DTOs
 * 
 * This file is automatically generated and should not be edited manually.
 * It provides a unified interface for all DTOs across ontologies.
 */

// Import all generated DTOs with correct paths
import { 
  OrganizationDTO, 
  isOrganizationDTO, 
  createOrganizationDTO 
} from '@generated/crm';

import { 
  PersonDTO, 
  isPersonDTO, 
  createPersonDTO 
} from '@generated/crm';

import { 
  ContactDTO, 
  isContactDTO, 
  createContactDTO 
} from '@generated/crm';

import { 
  CommunicationDTO, 
  isCommunicationDTO, 
  createCommunicationDTO 
} from '@generated/core';

import { 
  InvestorDTO, 
  isInvestorDTO, 
  createInvestorDTO 
} from '@generated/financial';

import { 
  DealDTO, 
  isDealDTO, 
  createDealDTO 
} from '@generated/financial';

/**
 * Union type for all enrichable entities
 */
export type EnrichableEntity = 
  | OrganizationDTO 
  | PersonDTO 
  | ContactDTO 
  | CommunicationDTO 
  | InvestorDTO 
  | DealDTO;

// Re-export all DTOs
export type {
  OrganizationDTO,
  PersonDTO,
  ContactDTO,
  CommunicationDTO,
  InvestorDTO,
  DealDTO
};

// Re-export all type guards
export {
  isOrganizationDTO,
  isPersonDTO,
  isContactDTO,
  isCommunicationDTO,
  isInvestorDTO,
  isDealDTO
};

// Re-export all factory functions
export {
  createOrganizationDTO,
  createPersonDTO,
  createContactDTO,
  createCommunicationDTO,
  createInvestorDTO,
  createDealDTO
};

/**
 * Legacy mapper functions for backward compatibility
 * These can be removed once all code is migrated to use DTOs directly
 */

// Organization legacy mapper
export const mapOrganizationToDTO = (organization: any): OrganizationDTO => {
  if (isOrganizationDTO(organization)) {
    return organization;
  }
  return createOrganizationDTO({
    id: organization.id || organization.getId?.() || '',
    name: organization.name || organization.getName?.() || '',
    legalName: organization.legalName || organization.getLegalName?.() || '',
    industry: organization.industry || organization.getIndustry?.() || '',
    website: organization.website || organization.getWebsite?.() || '',
    description: organization.description || organization.getDescription?.() || '',
    size: organization.size || organization.getSize?.() || '',
    foundedYear: organization.foundedYear || organization.getFoundedYear?.() || '',
    headquarters: organization.headquarters || organization.getHeadquarters?.() || {},
    address: organization.address || organization.getAddress?.() || {},
    phone: organization.phone || organization.getPhone?.() || '',
    email: organization.email || organization.getEmail?.() || '',
    parentOrganizationId: organization.parentOrganizationId || organization.getParentOrganizationId?.() || '',
    activities: organization.activities || organization.getActivities?.() || [],
    knowledgeElements: organization.knowledgeElements || organization.getKnowledgeElements?.() || [],
    validationStatus: organization.validationStatus || organization.getValidationStatus?.() || 'VALID',
    preferences: organization.preferences || organization.getPreferences?.() || {},
    enrichedData: organization.enrichedData,
    createdAt: organization.createdAt || organization.getCreatedAt?.() || new Date(),
    updatedAt: organization.updatedAt || organization.getUpdatedAt?.() || new Date()
  });
};

// Contact legacy mapper
export const mapContactToDTO = (contact: any): ContactDTO => {
  if (isContactDTO(contact)) {
    return contact;
  }
  return createContactDTO({
    id: contact.id || '',
    name: contact.name,
    email: contact.email,
    title: contact.title,
    firstName: contact.firstName,
    lastName: contact.lastName,
    phone: contact.phone,
    description: contact.description,
    organizationId: contact.organizationId,
    activities: Array.isArray(contact.activities) ? contact.activities : [],
    knowledgeElements: Array.isArray(contact.knowledgeElements) ? contact.knowledgeElements : [],
    validationStatus: contact.validationStatus || 'VALID',
    additionalEmails: Array.isArray(contact.additionalEmails) ? contact.additionalEmails : [],
    address: contact.address || {},
    preferences: contact.preferences || {},
    enrichedData: contact.enrichedData,
    createdAt: contact.createdAt || new Date(),
    updatedAt: contact.updatedAt || new Date()
  });
};

// Person legacy mapper
export const mapPersonToDTO = (person: any): PersonDTO => {
  if (isPersonDTO(person)) {
    return person;
  }
  return createPersonDTO({
    id: person.id || '',
    enrichedData: person.enrichedData,
    createdAt: person.createdAt || new Date(),
    updatedAt: person.updatedAt || new Date()
  });
};

// Communication legacy mapper
export const mapCommunicationToDTO = (comm: any): CommunicationDTO => {
  if (isCommunicationDTO(comm)) {
    return comm;
  }
  return createCommunicationDTO({
    id: comm.id || comm.getId?.() || '',
    subject: comm.subject || comm.getSubject?.() || '',
    timestamp: comm.date || comm.timestamp || comm.getDate?.() || undefined,
    enrichedData: comm.enrichedData,
    createdAt: comm.createdAt || new Date(),
    updatedAt: comm.updatedAt || new Date()
  });
};

// Investor legacy mapper
export const mapInvestorToDTO = (investor: any): InvestorDTO => {
  if (isInvestorDTO(investor)) {
    return investor;
  }
  return createInvestorDTO({
    id: investor.id || investor.getId?.() || '',
    name: investor.name || investor.getName?.() || '',
    aum: investor.aum || investor.getAum?.() || 0,
    enrichedData: investor.enrichedData,
    createdAt: investor.createdAt || new Date(),
    updatedAt: investor.updatedAt || new Date()
  });
};

// Deal legacy mapper
export const mapDealToDTO = (deal: any): DealDTO => {
  if (isDealDTO(deal)) {
    return deal;
  }
  return createDealDTO({
    id: deal.id || '',
    dealSize: deal.dealSize,
    sector: deal.sector,
    dealType: deal.dealType,
    purpose: deal.purpose,
    status: deal.status,
    enrichedData: deal.enrichedData,
    createdAt: deal.createdAt || new Date(),
    updatedAt: deal.updatedAt || new Date()
  });
};

/**
 * Reverse mappers for converting DTOs back to legacy format
 * These can be removed once all code is migrated
 */

export const mapDTOToOrganization = (dto: OrganizationDTO): any => ({
  ...dto,
  // Legacy method stubs for backward compatibility
  getId: () => dto.id,
  getName: () => dto.name,
  getLegalName: () => dto.legalName,
  getIndustry: () => dto.industry,
  getWebsite: () => dto.website,
  getDescription: () => dto.description,
  getSize: () => dto.size,
  getFoundedYear: () => dto.foundedYear,
  getHeadquarters: () => dto.headquarters,
  getAddress: () => dto.address,
  getPhone: () => dto.phone,
  getEmail: () => dto.email,
  getParentOrganizationId: () => dto.parentOrganizationId,
  getActivities: () => dto.activities || [],
  getKnowledgeElements: () => dto.knowledgeElements || [],
  getValidationStatus: () => dto.validationStatus,
  getCreatedAt: () => dto.createdAt,
  getUpdatedAt: () => dto.updatedAt,
  getPreferences: () => dto.preferences,
  addActivity: (id: string) => ({ id }),
  addKnowledgeElement: (id: string) => ({ id }),
  getOntologyMetadata: () => ({ validationStatus: dto.validationStatus }),
});

export const mapDTOToContact = (dto: ContactDTO): any => ({
  ...dto,
  // Legacy method stubs
  getId: () => dto.id,
  getName: () => dto.name,
  getEmail: () => dto.email,
  getTitle: () => dto.title,
});

export const mapDTOToPerson = (dto: PersonDTO): any => ({
  ...dto,
  // Legacy method stubs
  getId: () => dto.id,
  getType: () => dto.type,
  getLabel: () => dto.label,
});

export const mapDTOToCommunication = (dto: CommunicationDTO): any => ({
  ...dto,
  // Legacy method stubs
  getId: () => dto.id,
  getSubject: () => dto.subject,
  getDate: () => dto.timestamp,
});

export const mapDTOToInvestor = (dto: InvestorDTO): any => ({
  ...dto,
  // Legacy method stubs
  getId: () => dto.id,
  getName: () => dto.name,
  getAum: () => dto.aum,
  getType: () => dto.type,
  getLabel: () => dto.label,
});

export const mapDTOToDeal = (dto: DealDTO): any => ({
  ...dto,
  // Legacy method stubs
  getId: () => dto.id,
  getType: () => dto.type,
  getLabel: () => dto.label,
}); 
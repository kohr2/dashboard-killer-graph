// This file is auto-generated by scripts/sync-ontology.ts. Do not edit manually.
// Based on DOLCE foundational ontology

export enum DOLCECategory {
  ENDURANT = 'Endurant',
  PERDURANT = 'Perdurant',
  QUALITY = 'Quality',
  ABSTRACT = 'Abstract',
  AGENTIVE_PHYSICAL_OBJECT = 'AgentivePhysicalObject',
  NON_AGENTIVE_PHYSICAL_OBJECT = 'NonAgentivePhysicalObject',
}

export enum RelationshipType {
  CUSTOMER_RELATIONSHIP = 'CustomerRelationship',
  SUPPLIER_RELATIONSHIP = 'SupplierRelationship',
  PARTNER_RELATIONSHIP = 'PartnerRelationship',
  PROSPECT_RELATIONSHIP = 'ProspectRelationship',
  EMPLOYMENT = 'Employment',
  COLLABORATION = 'Collaboration',
  MEMBERSHIP = 'Membership',
  BEFORE = 'Before',
  AFTER = 'After',
  DURING = 'During',
  OVERLAPS = 'Overlaps',
}

export enum KnowledgeType {
  CUSTOMER_PROFILE = 'CustomerProfile',
  CUSTOMER_PREFERENCES = 'CustomerPreferences',
  CUSTOMER_BEHAVIOR = 'CustomerBehavior',
  CUSTOMER_HISTORY = 'CustomerHistory',
  MARKET_INTELLIGENCE = 'MarketIntelligence',
  COMPETITIVE_ANALYSIS = 'CompetitiveAnalysis',
  PRODUCT_KNOWLEDGE = 'ProductKnowledge',
  PROCESS_KNOWLEDGE = 'ProcessKnowledge',
  TRANSACTION_DATA = 'TransactionData',
  INTERACTION_HISTORY = 'InteractionHistory',
  COMMUNICATION_LOG = 'CommunicationLog',
}

export enum ActivityType {
  IDENTIFY = 'Identify',
  ATTRACT = 'Attract',
  ACQUIRE = 'Acquire',
  DEVELOP = 'Develop',
  RETAIN = 'Retain',
  LEAD_QUALIFICATION = 'LeadQualification',
  OPPORTUNITY_MANAGEMENT = 'OpportunityManagement',
  PROPOSAL_PREPARATION = 'ProposalPreparation',
  NEGOTIATION = 'Negotiation',
  CLOSING = 'Closing',
  CAMPAIGN_EXECUTION = 'CampaignExecution',
  CONTENT_CREATION = 'ContentCreation',
  MARKET_RESEARCH = 'MarketResearch',
  BRAND_MANAGEMENT = 'BrandManagement',
  CUSTOMER_SUPPORT = 'CustomerSupport',
  ISSUE_RESOLUTION = 'IssueResolution',
  MAINTENANCE = 'Maintenance',
  TRAINING = 'Training',
  DATA_COLLECTION = 'DataCollection',
  DATA_ANALYSIS = 'DataAnalysis',
  REPORTING = 'Reporting',
  DOCUMENT_MANAGEMENT = 'DocumentManagement',
}

export enum SoftwareType {
  CRM_PLATFORM = 'CRMPlatform',
  SALES_AUTOMATION = 'SalesAutomation',
  MARKETING_AUTOMATION = 'MarketingAutomation',
  EMAIL_SYSTEM = 'EmailSystem',
  KNOWLEDGE_GRAPH = 'KnowledgeGraph',
  API = 'API',
}

export interface DOLCEEntity {
  id: string;
  category: DOLCECategory;
  createdAt: Date;
  updatedAt: Date;
}

export interface InformationElement extends DOLCEEntity {
  category: DOLCECategory.ABSTRACT;
  type: KnowledgeType;
  title: string;
  content: any;
  format: 'text' | 'json' | 'xml' | 'binary' | 'multimedia';
  source: string;
  reliability: number;
  confidentiality: 'public' | 'internal' | 'confidential' | 'restricted';
  version: string;
  relatedEntities: string[];
  metadata: Record<string, any>;
}

export interface CRMActivity extends DOLCEEntity {
  category: DOLCECategory.PERDURANT;
  type: ActivityType;
  name: string;
  description?: string;
  participants: string[];
  resources?: string[];
  inputs?: string[];
  outputs?: string[];
  startTime?: Date;
  endTime?: Date;
  duration?: number;
  status: 'planned' | 'in_progress' | 'completed' | 'cancelled' | 'failed';
  success: boolean;
  cost?: number;
  outcome?: string;
  performanceMetrics?: Record<string, number>;
  location?: string;
  channel?: string;
  context: Record<string, any>;
}

// Relationship definitions
export interface OCreamRelationship {
  id: string;
  relationshipType: string;
  sourceEntityId: string;
  targetEntityId: string;
  sourceRole?: string;
  targetRole?: string;
  temporal: {
    startTime?: Date;
    endTime?: Date;
    duration?: number;
  };
  properties: Record<string, any>;
  context?: string;
  strength?: number;
  createdAt: Date;
  updatedAt: Date;
}

// Software module
export interface SoftwareSystem extends DOLCEEntity {
  category: DOLCECategory.NON_AGENTIVE_PHYSICAL_OBJECT;
  type: SoftwareType;
  name: string;
  version: string;
  vendor: string;
  capabilities: string[];
  status: 'active' | 'inactive' | 'maintenance' | 'deprecated';
  deployment: 'on-premise' | 'cloud' | 'hybrid';
}

export class OCreamV2Ontology {
  private static instance: OCreamV2Ontology;
  private entities: Map<string, DOLCEEntity> = new Map();
  private relationships: Map<string, OCreamRelationship> = new Map();
  private typeIndex: Map<string, Set<string>> = new Map();
  private relationshipIndex: Map<string, Set<string>> = new Map();

  constructor() {
    // Initialize type indices
    Object.values(DOLCECategory).forEach(category => {
      this.typeIndex.set(category, new Set());
    });
  }

  public static getInstance(): OCreamV2Ontology {
    if (!OCreamV2Ontology.instance) {
      OCreamV2Ontology.instance = new OCreamV2Ontology();
    }
    return OCreamV2Ontology.instance;
  }

  public getStatistics() {
    return {
      entityCount: this.entities.size,
      relationshipCount: this.relationships.size,
      knowledgeElementCount: this.getEntitiesByType(DOLCECategory.ABSTRACT).length,
      activityCount: this.getEntitiesByType(DOLCECategory.PERDURANT).length,
      typeDistribution: Object.fromEntries(
        Array.from(this.typeIndex.entries()).map(([type, ids]) => [type, ids.size])
      )
    };
  }

  addEntity(entity: DOLCEEntity): void {
    this.entities.set(entity.id, entity);
    
    // Update type index
    if (!this.typeIndex.has(entity.category)) {
      this.typeIndex.set(entity.category, new Set());
    }
    this.typeIndex.get(entity.category)!.add(entity.id);
  }

  getEntity(id: string): DOLCEEntity | undefined {
    return this.entities.get(id);
  }

  getEntitiesByType(category: DOLCECategory): DOLCEEntity[] {
    const ids = this.typeIndex.get(category) || new Set();
    return Array.from(ids).map(id => this.entities.get(id)!).filter(Boolean);
  }

  addRelationship(relationship: OCreamRelationship): void {
    this.relationships.set(relationship.id, relationship);
    
    // Update relationship index
    const sourceKey = relationship.sourceEntityId;
    const targetKey = relationship.targetEntityId;
    
    if (!this.relationshipIndex.has(sourceKey)) {
      this.relationshipIndex.set(sourceKey, new Set());
    }
    if (!this.relationshipIndex.has(targetKey)) {
      this.relationshipIndex.set(targetKey, new Set());
    }
    
    this.relationshipIndex.get(sourceKey)!.add(relationship.id);
    this.relationshipIndex.get(targetKey)!.add(relationship.id);
  }

  getRelationshipsForEntity(entityId: string): OCreamRelationship[] {
    const relationshipIds = this.relationshipIndex.get(entityId) || new Set();
    return Array.from(relationshipIds)
      .map(id => this.relationships.get(id)!)
      .filter(Boolean);
  }

  findRelatedEntities(entityId: string, relationshipType?: string): DOLCEEntity[] {
    const relationships = this.getRelationshipsForEntity(entityId);
    const filteredRels = relationshipType 
      ? relationships.filter(r => r.relationshipType === relationshipType)
      : relationships;

    const relatedIds = new Set<string>();
    filteredRels.forEach(rel => {
      if (rel.sourceEntityId !== entityId) {
        relatedIds.add(rel.sourceEntityId);
      }
      if (rel.targetEntityId !== entityId) {
        relatedIds.add(rel.targetEntityId);
      }
    });

    return Array.from(relatedIds)
      .map(id => this.entities.get(id)!)
      .filter(Boolean);
  }

  validateEntity(entity: DOLCEEntity): boolean {
    // Validate DOLCE category constraints
    switch (entity.category) {
      case DOLCECategory.ENDURANT:
      case DOLCECategory.AGENTIVE_PHYSICAL_OBJECT:
      case DOLCECategory.NON_AGENTIVE_PHYSICAL_OBJECT:
        return this.validateEndurant(entity);
      case DOLCECategory.PERDURANT:
        return this.validatePerdurant(entity);
      case DOLCECategory.QUALITY:
        return this.validateQuality(entity);
      case DOLCECategory.ABSTRACT:
        return this.validateAbstract(entity);
      default:
        return false;
    }
  }

  private validateEndurant(entity: DOLCEEntity): boolean {
    // Endurants persist through time
    return entity.createdAt <= entity.updatedAt;
  }

  private validatePerdurant(entity: DOLCEEntity): boolean {
    // Perdurants occur in time (events, activities)
    const activity = entity as CRMActivity;
    if (activity.startTime && activity.endTime) {
      return activity.startTime <= activity.endTime;
    }
    return entity.createdAt <= entity.updatedAt;
  }

  private validateQuality(entity: DOLCEEntity): boolean {
    // Qualities are properties that inhere in other entities
    return entity.createdAt <= entity.updatedAt;
  }

  private validateAbstract(entity: DOLCEEntity): boolean {
    // Abstract entities have no spatial or temporal qualities
    return entity.createdAt <= entity.updatedAt;
  }

  exportOntology(): any {
    return {
      metadata: {
        name: 'O-CREAM-v2',
        version: '2.0',
        foundation: 'DOLCE',
        modules: ['Relationships', 'Knowledge', 'Activities', 'Software', 'Miscellaneous'],
        createdAt: new Date(),
        entityCount: this.entities.size,
        relationshipCount: this.relationships.size
      },
      entities: Array.from(this.entities.values()),
      relationships: Array.from(this.relationships.values()),
      typeDistribution: Object.fromEntries(
        Array.from(this.typeIndex.entries()).map(([type, ids]) => [type, ids.size])
      )
    };
  }

  addKnowledgeElement(id: string, type: string, knowledgeElement: InformationElement): void {
    // Add knowledge element as an abstract entity
    this.addEntity(knowledgeElement);
  }

  addActivity(id: string, type: string, activity: CRMActivity): void {
    // Add activity as a perdurant entity
    this.addEntity(activity);
  }

  removeEntity(id: string): void {
    const entity = this.entities.get(id);
    if (!entity) return;

    // Remove from main entity map
    this.entities.delete(id);

    // Remove from type index
    if (this.typeIndex.has(entity.category)) {
      this.typeIndex.get(entity.category)!.delete(id);
    }

    // In a real implementation, you'd also need to handle cascading deletes for relationships
  }
}

export const oCreamV2 = new OCreamV2Ontology();

// Factory function for creating information elements
export function createInformationElement(data: Partial<InformationElement>): InformationElement {
  return {
    id: data.id || `info-${Date.now()}`,
    category: DOLCECategory.ABSTRACT,
    type: data.type || KnowledgeType.COMMUNICATION_LOG,
    title: data.title || 'Untitled Information Element',
    content: data.content || {},
    format: data.format || 'json',
    source: data.source || 'Unknown',
    reliability: data.reliability ?? 0.5,
    confidentiality: data.confidentiality || 'internal',
    version: data.version || '1.0',
    relatedEntities: data.relatedEntities || [],
    metadata: data.metadata || {},
    createdAt: data.createdAt || new Date(),
    updatedAt: data.updatedAt || new Date(),
    ...data,
  };
}

export function createActivity(data: Partial<CRMActivity>): CRMActivity {
  return {
    id: data.id || `activity-${Date.now()}`,
    category: DOLCECategory.PERDURANT,
    type: data.type || ActivityType.DATA_COLLECTION,
    name: data.name || 'Untitled Activity',
    status: data.status || 'planned',
    success: data.success ?? false,
    context: data.context || {},
    participants: data.participants || [],
    createdAt: data.createdAt || new Date(),
    updatedAt: data.updatedAt || new Date(),
    ...data,
  };
}

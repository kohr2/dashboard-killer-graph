import request from 'supertest';
import express from 'express';
import { NLPServiceClient } from '@platform/processing/nlp-service.client';

// Mock the NLP service client
jest.mock('@platform/processing/nlp-service.client');
const MockedNLPServiceClient = NLPServiceClient as jest.MockedClass<typeof NLPServiceClient>;

describe('MCP Server HTTP - NLP Integration', () => {
  let app: express.Application;
  let mockNlpClient: jest.Mocked<NLPServiceClient>;

  beforeEach(() => {
    // Reset mocks
    jest.clearAllMocks();
    
    // Create mock NLP client
    mockNlpClient = {
      healthCheck: jest.fn(),
      extractEntities: jest.fn(),
      refineEntities: jest.fn(),
      extractGraph: jest.fn(),
      batchExtractGraph: jest.fn(),
      generateEmbeddings: jest.fn(),
      getAvailableOntologies: jest.fn(),
    } as any;
    
    MockedNLPServiceClient.mockImplementation(() => mockNlpClient);
    
    // Mock the health check to succeed
    mockNlpClient.healthCheck.mockResolvedValue({
      status: 'healthy',
      timestamp: '2024-01-01T12:00:00Z'
    });
    
    // Create a simple test app (we'll test the endpoints directly)
    app = express();
    app.use(express.json());
  });

  describe('Tools endpoint', () => {
    it('should include NLP tool in tools list', async () => {
      // This would require setting up the full MCP server
      // For now, we'll test the tool description function
      const generateNLPToolDescription = () => {
        return `Process text using Natural Language Processing (NLP) services.\n\n` +
               `**Available Operations**:\n` +
               `- Entity extraction (raw spaCy)\n` +
               `- Entity refinement (spaCy + LLM)\n` +
               `- Knowledge graph extraction\n` +
               `- Batch processing\n` +
               `- Embedding generation\n\n` +
               `**Available Ontologies**:\n` +
               `- financial: Companies, people, monetary amounts\n` +
               `- procurement: Contracts, suppliers, amounts\n` +
               `- crm: People, companies, opportunities\n` +
               `- default: General purpose extraction\n\n` +
               `**Example Operations**:\n` +
               `- "extract entities from [text]" - Extract named entities\n` +
               `- "extract graph from [text] using [ontology]" - Generate knowledge graph\n` +
               `- "generate embeddings for [texts]" - Create vector embeddings\n` +
               `- "batch process [texts] with [ontology]" - Process multiple texts`;
      };

      const description = generateNLPToolDescription();
      
      expect(description).toContain('Natural Language Processing');
      expect(description).toContain('Entity extraction');
      expect(description).toContain('Knowledge graph extraction');
      expect(description).toContain('financial');
      expect(description).toContain('procurement');
      expect(description).toContain('crm');
    });
  });

  describe('NLP Client Integration', () => {
    it('should create NLP client with correct configuration', () => {
      const client = new MockedNLPServiceClient('http://localhost:8000');
      
      expect(MockedNLPServiceClient).toHaveBeenCalledWith('http://localhost:8000');
    });

    it('should handle NLP service health check', async () => {
      const client = new MockedNLPServiceClient('http://localhost:8000');
      
      await client.healthCheck();
      
      expect(mockNlpClient.healthCheck).toHaveBeenCalled();
    });

    it('should handle NLP service unavailability gracefully', async () => {
      mockNlpClient.healthCheck.mockRejectedValue(new Error('Connection refused'));
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      
      await expect(client.healthCheck()).rejects.toThrow('Connection refused');
    });
  });

  describe('NLP Operations', () => {
    it('should extract entities correctly', async () => {
      const mockEntities = [
        {
          type: 'COMPANY_NAME',
          value: 'Apple Inc.',
          confidence: 0.85
        }
      ];
      
      mockNlpClient.extractEntities.mockResolvedValue(mockEntities);
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      const result = await client.extractEntities('Apple Inc. CEO Tim Cook', 'financial');
      
      expect(mockNlpClient.extractEntities).toHaveBeenCalledWith('Apple Inc. CEO Tim Cook', 'financial');
      expect(result).toEqual(mockEntities);
    });

    it('should extract knowledge graph correctly', async () => {
      const mockGraph = {
        entities: [
          {
            type: 'COMPANY_NAME',
            value: 'Apple Inc.',
            confidence: 0.9
          }
        ],
        relationships: [
          {
            source: 'Tim Cook',
            target: 'Apple Inc.',
            type: 'WORKS_FOR',
            confidence: 0.9
          }
        ],
        refinement_info: 'Graph generated by LLM',
        ontology_used: 'financial'
      };
      
      mockNlpClient.extractGraph.mockResolvedValue(mockGraph);
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      const result = await client.extractGraph('Apple Inc. CEO Tim Cook', 'financial');
      
      expect(mockNlpClient.extractGraph).toHaveBeenCalledWith('Apple Inc. CEO Tim Cook', 'financial');
      expect(result).toEqual(mockGraph);
    });

    it('should handle batch extraction correctly', async () => {
      const mockGraphs = [
        {
          entities: [{ type: 'COMPANY_NAME', value: 'Apple Inc.' }],
          relationships: [],
          refinement_info: 'Graph 1',
          ontology_used: 'financial'
        },
        {
          entities: [{ type: 'COMPANY_NAME', value: 'Microsoft Corp.' }],
          relationships: [],
          refinement_info: 'Graph 2',
          ontology_used: 'financial'
        }
      ];
      
      mockNlpClient.batchExtractGraph.mockResolvedValue(mockGraphs);
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      const texts = ['Apple Inc. CEO Tim Cook', 'Microsoft Corp. CEO Satya Nadella'];
      const result = await client.batchExtractGraph(texts, 'financial');
      
      expect(mockNlpClient.batchExtractGraph).toHaveBeenCalledWith(texts, 'financial');
      expect(result).toEqual(mockGraphs);
    });

    it('should generate embeddings correctly', async () => {
      const mockEmbeddings = [
        [0.1, 0.2, 0.3],
        [0.4, 0.5, 0.6]
      ];
      
      mockNlpClient.generateEmbeddings.mockResolvedValue(mockEmbeddings);
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      const texts = ['Apple Inc.', 'Microsoft Corp.'];
      const result = await client.generateEmbeddings(texts);
      
      expect(mockNlpClient.generateEmbeddings).toHaveBeenCalledWith(texts);
      expect(result).toEqual(mockEmbeddings);
    });
  });

  describe('Error Handling', () => {
    it('should handle NLP service errors gracefully', async () => {
      mockNlpClient.extractEntities.mockRejectedValue(new Error('NLP service error'));
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      
      await expect(client.extractEntities('test text')).rejects.toThrow('NLP service error');
    });

    it('should handle network timeouts', async () => {
      mockNlpClient.extractGraph.mockRejectedValue(new Error('Request timeout'));
      
      const client = new MockedNLPServiceClient('http://localhost:8000');
      
      await expect(client.extractGraph('test text')).rejects.toThrow('Request timeout');
    });
  });
}); 